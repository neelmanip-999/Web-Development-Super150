---

# üìÑ Removing Elements in DOM (JavaScript)

When working with dynamic UIs, sometimes you need to **delete elements** from the DOM.
There are two main approaches:

---

## 1. `parent.removeChild(child)`

* Removes a **specific child node** from a parent element.
* Requires you to know both:

  * The **parent** element
  * The **child** element you want to remove

### Example:

```html
<div id="container">
  <h1 id="h1pehla">First Heading</h1>
  <h2 id="h1doosra">Second Heading</h2>
</div>

<script>
  let parent = document.querySelector('#container');
  let h1pehla = document.querySelector('#h1pehla');

  parent.removeChild(h1pehla); 
  // Removes <h1> from inside the container
</script>
```

---

## 2. `element.remove()`

* Removes the element **directly**, without needing its parent.
* Cleaner and shorter.

### Example:

```html
<div id="container">
  <h1 id="h1pehla">First Heading</h1>
  <h2 id="h1doosra">Second Heading</h2>
</div>

<script>
  let h2doosra = document.querySelector('#h1doosra');
  h2doosra.remove(); 
  // Directly removes <h2> itself
</script>
```

---

# ‚úÖ Comparison Table

| Method                      | Needs parent? | Removes multiple?    | Example use case                      |
| --------------------------- | ------------- | -------------------- | ------------------------------------- |
| `parent.removeChild(child)` | ‚úÖ Yes         | ‚ùå No (one at a time) | When you already have parent & child  |
| `element.remove()`          | ‚ùå No          | ‚ùå No (one at a time) | When you just have the element itself |

---

# üìå Best Practices

* Prefer **`element.remove()`** for simplicity.
* Use **`removeChild()`** when you‚Äôre already working with the parent-child structure (like looping over children).

---



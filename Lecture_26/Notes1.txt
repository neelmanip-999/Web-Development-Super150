### JavaScript Promises - Detailed Explanation

## ðŸ“Œ What is a Promise in JavaScript?
- A **Promise** is a special JavaScript object that represents the **eventual completion** (or **failure**) of an asynchronous operation.
- Promises provide a cleaner and more organized way to handle asynchronous tasks like API calls, file reading, etc.

---

## ðŸ“Œ Why Do We Need Promises?
In callback-based code, deeply nested functions lead to **callback hell**, which makes the code difficult to read and maintain. Promises simplify this by offering better code structure and improved error handling.

---

## ðŸ“Œ Creating a Promise
A **Promise** is created using the `Promise` constructor:

```javascript
let p1 = new Promise(function(resolve, reject) {
    // Asynchronous operation
    let taskCompleted = true; // Simulating success or failure

    if (taskCompleted) {
        resolve("Task completed successfully!");  // When the operation is successful
    } else {
        reject("Task failed!");  // When the operation fails
    }
});
```

---

## ðŸ“Œ Understanding `resolve()` and `reject()`
- `resolve()` â†’ Called when the **promise is fulfilled** (success).
- `reject()` â†’ Called when the **promise is rejected** (failure).

---

## ðŸ“Œ Consuming a Promise
To handle the result of the promise, we use:
1. `.then()` â†’ Runs when the promise is **resolved** (fulfilled).
2. `.catch()` â†’ Runs when the promise is **rejected** (failed).
3. `.finally()` â†’ Runs **regardless** of whether the promise is fulfilled or rejected.

### Example:
```javascript
p1
  .then(function(successMessage) {
      console.log("Success:", successMessage);  // Executes if resolve() is called
  })
  .catch(function(errorMessage) {
      console.log("Error:", errorMessage);  // Executes if reject() is called
  })
  .finally(function() {
      console.log("Operation finished!");  // Always runs
  });
```

**Output (if `taskCompleted = true`):**
```
Success: Task completed successfully!
Operation finished!
```

**Output (if `taskCompleted = false`):**
```
Error: Task failed!
Operation finished!
```

---

## ðŸ“Œ Promise States
A promise can have **three possible states**:
1. **Pending** â†’ Initial state (neither fulfilled nor rejected).
2. **Fulfilled** â†’ The operation completed successfully (`resolve()` was called).
3. **Rejected** â†’ The operation failed (`reject()` was called).

---

## ðŸ“Œ Chaining Promises
- Promises can be chained to perform multiple asynchronous steps in sequence.

### Example:
```javascript
function step1() {
    return new Promise(function(resolve, reject) {
        setTimeout(() => {
            console.log("Step 1: Image selected");
            resolve("Selected image");
        }, 2000);
    });
}

function step2(image) {
    return new Promise(function(resolve, reject) {
        setTimeout(() => {
            console.log(`Step 2: Filter applied to ${image}`);
            resolve("Filtered image");
        }, 2000);
    });
}

function step3(filteredImage) {
    return new Promise(function(resolve, reject) {
        setTimeout(() => {
            console.log(`Step 3: Caption added to ${filteredImage}`);
            resolve("Captioned image");
        }, 2000);
    });
}

// Chaining Promises to avoid callback hell
step1()
    .then(step2)       // Step 2 starts after Step 1 is resolved
    .then(step3)       // Step 3 starts after Step 2 is resolved
    .then(finalImage => {
        console.log(`Final Result: ${finalImage}`);
    })
    .catch(err => {
        console.error("Error occurred:", err);
    });
```

**Output:**
```
Step 1: Image selected
Step 2: Filter applied to Selected image
Step 3: Caption added to Filtered image
Final Result: Captioned image
```

---

## ðŸ“Œ Key Benefits of Promises
âœ… Solves **callback hell** by providing better structure.  
âœ… Improves **error handling** with `.catch()`.  
âœ… Allows **chaining** for sequential execution of multiple steps.  
âœ… `.finally()` ensures cleanup actions are always performed.  

---

## ðŸ“Œ When to Use Promises?
- When performing **API calls**.
- When handling **file reading/writing**.
- When performing **database operations**.
- When writing **async tasks** like animations, timers, etc.

---

## ðŸ“Œ Next Step â†’ Async/Await
- While Promises improve code readability, **async/await** provides an even cleaner syntax.


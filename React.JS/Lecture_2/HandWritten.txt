we cant use for loop in react
we cant use if and else statement in react
if else is a conditional rendering
so to use conditional rendering we use ternary operator.
If we want to use loop we use map
and if we want to use if else we use ternary operator.


Why Use .map() Instead of for or forEach in React?
--------------------------------------------------

1. Because JSX is Declarative
React encourages declarative code ‚Äî describing what the UI should look like, not how to build it step-by-step.

With .map():
    {todos.map((item, index) => (
      <li key={index}>{item}</li>
    ))}
Tells React: ‚ÄúFor each item in the list, return this UI element.‚Äù

With for loop:
    const listItems = [];
    for (let i = 0; i < todos.length; i++) {
      listItems.push(<li key={i}>{todos[i]}</li>);
    }
    // Then render: {listItems}

2. .map() Directly Returns an Array
.map() is designed to return a new array (of React elements), which JSX can render directly.

3. Cleaner and Shorter Code
    todos.map(...) // 1 line
    vs.
    for (...) { push(...) } // 4-5 lines

Why Use the Ternary Operator Instead of if-else in JSX?
--------------------------------------------------------

1. if-else is a Statement, Not an Expression
You can‚Äôt use if-else directly inside JSX because JSX expects expressions.

    // ‚ùå Invalid in JSX
    {if (x > 0) { return "Positive" } else { return "Negative" }}

2. Ternary is an Expression
    {x > 0 ? "Positive" : "Negative"} // ‚úÖ This works inside JSX

3. More Concise than using if before return
    {isLoggedIn
      ? <Dashboard />
      : <LoginPage />
    }

Instead of:
    if (isLoggedIn) {
      return <Dashboard />;
    } else {
      return <LoginPage />;
    }

Summary
-------

| Feature         | Why It‚Äôs Preferred in React                   |
|----------------|------------------------------------------------|
| .map()         | Returns array of JSX directly; declarative    |
| for loop       | Verbose, not used directly in JSX             |
| Ternary        | JSX-friendly expression; clean conditional UI |
| if-else        | Not allowed directly inside JSX               |





Event Listener --> 
let say we add a event listner and set onClick the function of this is to change the name od a person but on clicking it no change is shown so what is the reason the reason is value is definetely changed but it did not re render the page so it does not reflect to us so here come the concept of hooks.

react hooks --> this are the special functions provided by the react it is built in function we do not have to create it we just have to use it
eg useState, useEffect.
if their is use before the function then it is a hooks.

useState accepts an argument it can be of any data type it returns an array with two value the first is the name of the variable and the second is the function
in the sense of react we call variable a state.

let [name, function] = useState();
() -> string, boolean, {}, [] anything accepts one argument. 
function is the method by which help we change the value of the variable.

useState rerenders the value so we can see the changed value.

react create the component
reactDom show this components by rendering it


state and props are imutable we cannot change it directly...
but by the help of hooks we can change it.



### `useEffect` in React: Explained Simply

`useEffect` is a **React Hook** that lets you **run side effects** in your function components.

---

### üîÑ What are "side effects"?

Side effects are operations that can‚Äôt be done during rendering, like:

* Fetching data from an API
* Directly manipulating the DOM
* Setting up a timer (`setTimeout`, `setInterval`)
* Subscribing/unsubscribing to events

---

### üß† Syntax:

```js
useEffect(() => {
  // your code here (side effect)
}, [dependencies]);
```

---

### ‚úÖ Examples:

#### 1. Run code once when component mounts

```js
useEffect(() => {
  console.log('Component mounted');
}, []);
```

**Explanation**: The empty array `[]` means this runs **only once** (like `componentDidMount` in class components).

---

#### 2. Run when a variable changes

```js
useEffect(() => {
  console.log('Count changed to', count);
}, [count]);
```

**Explanation**: This runs every time the `count` variable changes.

---

#### 3. Cleanup (like unmounting)

```js
useEffect(() => {
  const intervalId = setInterval(() => {
    console.log('Tick');
  }, 1000);

  return () => {
    clearInterval(intervalId); // cleanup when component unmounts
  };
}, []);
```

---

### üîÅ Without dependency array

```js
useEffect(() => {
  console.log('Runs after every render');
});
```

**Explanation**: If you don‚Äôt pass any second argument, the effect runs after **every** render.

---

### üí° Summary

| Use Case                          | Dependency Array            |
| --------------------------------- | --------------------------- |
| Run once on mount                 | `[]`                        |
| Run when specific values change   | `[value1, value2]`          |
| Run on every render               | *no second argument*        |
| Run on mount + cleanup on unmount | `[]` with `return () => {}` |

---



The `useRef` hook in React is used to:

---

### ‚úÖ **1. Access DOM elements directly**

You can use `useRef` to get a **reference to a DOM element**, like an input, so you can interact with it without re-rendering the component.

#### Example: Focusing an input field

```jsx
import { useRef, useEffect } from "react";

function MyComponent() {
  const inputRef = useRef(null);

  useEffect(() => {
    // Focus the input when component mounts
    inputRef.current.focus();
  }, []);

  return <input ref={inputRef} />;
}
```

---

### ‚úÖ **2. Store mutable values that don‚Äôt cause re-renders**

You can use `useRef` like a variable that **persists across re-renders**, but changing its value **won‚Äôt trigger a re-render**, unlike `useState`.

#### Example: Store previous count

```jsx
import { useRef, useState, useEffect } from "react";

function Counter() {
  const [count, setCount] = useState(0);
  const prevCount = useRef(count);

  useEffect(() => {
    prevCount.current = count;
  }, [count]);

  return (
    <div>
      <p>Now: {count}, Before: {prevCount.current}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}
```

---

### ‚úÖ **3. Avoid re-initializing values**

Useful for storing things like interval IDs or expensive objects **once** during the component's life.

---

## üß† Summary

| Purpose                             | Triggers Re-render? | Use Case Example                    |
| ----------------------------------- | ------------------- | ----------------------------------- |
| Accessing DOM nodes                 | ‚ùå No                | Focus an input field on load        |
| Storing mutable values              | ‚ùå No                | Store previous values or timers     |
| Persisting values across re-renders | ‚ùå No                | Maintain state without re-rendering |

---



